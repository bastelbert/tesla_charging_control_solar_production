[
    {
        "id": "8fc3d32655d2dfaf",
        "type": "tab",
        "label": "Tesla charge control",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8a9f084e07c52c68",
        "type": "debug",
        "z": "8fc3d32655d2dfaf",
        "name": "start charging",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 120,
        "wires": []
    },
    {
        "id": "f6504bc6dc4df3cb",
        "type": "loxone-control-in",
        "z": "8fc3d32655d2dfaf",
        "name": "current production",
        "miniserver": "",
        "control": "1570bf82-011d-afca-ffffcce15125b0a9",
        "state": "1570bf82-011d-afac-ffff4e1403e5e3e7",
        "x": 610,
        "y": 460,
        "wires": [
            [
                "ee9ba9365547f8fe"
            ]
        ],
        "info": "The current production of the solar system is delivered by Loxone."
    },
    {
        "id": "c68d8a7b691d7c20",
        "type": "debug",
        "z": "8fc3d32655d2dfaf",
        "name": "charging power",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 240,
        "wires": []
    },
    {
        "id": "9d3ba241dbdef14c",
        "type": "ui_switch",
        "z": "8fc3d32655d2dfaf",
        "name": "",
        "label": "start PV controlled charging",
        "tooltip": "",
        "group": "7e9f2855f9f81e8f",
        "order": 3,
        "width": 5,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "START",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "STOP",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 280,
        "y": 80,
        "wires": [
            [
                "17d29090c9e98d03"
            ]
        ],
        "info": "Button to start the whole charging process."
    },
    {
        "id": "090f3a32c4936c8e",
        "type": "controltimer",
        "z": "8fc3d32655d2dfaf",
        "name": "",
        "timerType": "loop",
        "timerDurationUnit": "second",
        "timerDurationType": "num",
        "timerDuration": 10,
        "timerLoopTimeoutUnit": "second",
        "timerLoopTimeoutType": "num",
        "timerLoopTimeout": 0,
        "loopTimeoutMessageType": "str",
        "loopTimeoutMessage": "LOOP_TIMEOUT",
        "timerMaxLoopIterationsType": "num",
        "timerMaxLoopIterations": 0,
        "loopMaxIterationsMessageType": "str",
        "loopMaxIterationsMessage": "MAX_LOOP_ITERATIONS",
        "isConsecutiveStartActionTimerResetAllowed": false,
        "isRunningTimerProgressVisible": false,
        "outputReceivedMessageOnTimerTrigger": true,
        "outputReceivedMessageOnTimerHalt": true,
        "startTimerOnReceivalOfUnknownMessage": false,
        "resetTimerOnReceivalOfUnknownMessage": false,
        "isDebugModeEnabled": false,
        "timerTriggeredMessageType": "str",
        "timerTriggeredMessage": "TIMER_TRIGGERED",
        "timerHaltedMessageType": "str",
        "timerHaltedMessage": "TIMER_HALTED",
        "isStartActionEnabled": true,
        "isStopActionEnabled": true,
        "isResetActionEnabled": true,
        "isPauseActionEnabled": true,
        "isContinueActionEnabled": true,
        "actionPropertyNameType": "str",
        "actionPropertyName": "payload",
        "startActionNameType": "str",
        "startActionName": "START",
        "stopActionNameType": "str",
        "stopActionName": "STOP",
        "resetActionNameType": "str",
        "resetActionName": "RESET",
        "pauseActionNameType": "str",
        "pauseActionName": "PAUSE",
        "continueActionNameType": "str",
        "continueActionName": "CONTINUE",
        "x": 360,
        "y": 160,
        "wires": [
            [
                "7d771f671c5d5406",
                "170db4afaab936a8"
            ],
            []
        ]
    },
    {
        "id": "4ae91e212d540717",
        "type": "debug",
        "z": "8fc3d32655d2dfaf",
        "name": "stop charging",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 60,
        "wires": []
    },
    {
        "id": "17d29090c9e98d03",
        "type": "switch",
        "z": "8fc3d32655d2dfaf",
        "name": "START/STOP",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "STOP",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "START",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 620,
        "y": 80,
        "wires": [
            [
                "090f3a32c4936c8e",
                "b93fb30f2fdb8813",
                "a763f3a400604ab8"
            ],
            [
                "090f3a32c4936c8e",
                "c8fe46abc3d66a6a",
                "a763f3a400604ab8"
            ]
        ]
    },
    {
        "id": "7d771f671c5d5406",
        "type": "function",
        "z": "8fc3d32655d2dfaf",
        "name": "START",
        "func": "var newMsg = { payload: msg.payload,topic:\"go\" };\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 240,
        "wires": [
            [
                "60d0bee8407a387b"
            ]
        ]
    },
    {
        "id": "ee9ba9365547f8fe",
        "type": "function",
        "z": "8fc3d32655d2dfaf",
        "name": "current production",
        "func": "var newMsg = { payload: msg.payload,topic:\"prod_current\" };\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 460,
        "wires": [
            [
                "9642a250a90e3631"
            ]
        ]
    },
    {
        "id": "9862e89336ea8fbe",
        "type": "function",
        "z": "8fc3d32655d2dfaf",
        "name": "power consumption",
        "func": "msg.payload = msg.payload / 1000\nvar newMsg = { payload: msg.payload,topic:\"verbrauch_current\" };\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 400,
        "wires": [
            [
                "bc71ecdd678a3514"
            ]
        ]
    },
    {
        "id": "11ae120d62d5f24c",
        "type": "function",
        "z": "8fc3d32655d2dfaf",
        "name": "charger power",
        "func": "msg.payload = Number(msg.payload.charger_power);\nvar newMsg = { payload: msg.payload,topic:\"llkw_current\" };\nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 340,
        "wires": [
            [
                "bc71ecdd678a3514"
            ]
        ]
    },
    {
        "id": "bc71ecdd678a3514",
        "type": "function",
        "z": "8fc3d32655d2dfaf",
        "name": "consumption - charger power",
        "func": "// set variables from two different messages\nif (msg.topic === 'llkw_current') {\n  context.llkwcurrent = msg.payload;\n} else if (msg.topic === 'verbrauch_current') {\n  context.verbrauch_current = msg.payload;\n}\n\nmsg.payload = context.verbrauch_current - context.llkwcurrent\n\nvar newMsg = { payload: msg.payload,topic:\"hausverbrauch_current\" };\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 360,
        "wires": [
            [
                "9642a250a90e3631"
            ]
        ]
    },
    {
        "id": "7f91d50bf8d5c1ee",
        "type": "loxone-control-in",
        "z": "8fc3d32655d2dfaf",
        "name": "current power consumption",
        "miniserver": "",
        "control": "143b35fa-0164-fd97-ffffcce15125b0a9",
        "state": "143b35fa-0164-fd8c-ffffae1b59fd2db7",
        "x": 580,
        "y": 400,
        "wires": [
            [
                "9862e89336ea8fbe"
            ]
        ],
        "info": "The current total power consumption is supplied by Loxone."
    },
    {
        "id": "9642a250a90e3631",
        "type": "function",
        "z": "8fc3d32655d2dfaf",
        "name": "production - home power consumption",
        "func": "// set variables from two different messages\nif (msg.topic === 'hausverbrauch_current') {\n  context.hausverbrauch_current = msg.payload;\n} else if (msg.topic === 'prod_current') {\n  context.prod_current = msg.payload;\n}\n\n// IMPORTANT: output unit has to be in W, e.g. 5530W\nmsg.payload = (context.prod_current - context.hausverbrauch_current) *1000\n\nvar newMsg = { payload: msg.payload,topic:\"ladekapa_current\" };\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 360,
        "wires": [
            [
                "60d0bee8407a387b"
            ]
        ]
    },
    {
        "id": "4dac588305497012",
        "type": "tesla-api",
        "z": "8fc3d32655d2dfaf",
        "teslaConfig": "",
        "command": "chargeState",
        "name": "chargeState",
        "vehicleID": "<vehicleID>",
        "autoWakeUp": false,
        "x": 630,
        "y": 340,
        "wires": [
            [
                "11ae120d62d5f24c"
            ]
        ]
    },
    {
        "id": "c8fe46abc3d66a6a",
        "type": "tesla-api",
        "z": "8fc3d32655d2dfaf",
        "teslaConfig": "",
        "command": "startCharge",
        "name": "startCharge",
        "vehicleID": "<vehicleID>",
        "autoWakeUp": true,
        "x": 1050,
        "y": 120,
        "wires": [
            [
                "8a9f084e07c52c68"
            ]
        ]
    },
    {
        "id": "b93fb30f2fdb8813",
        "type": "tesla-api",
        "z": "8fc3d32655d2dfaf",
        "teslaConfig": "",
        "command": "stopCharge",
        "name": "stopCharge",
        "vehicleID": "<vehicleID>",
        "autoWakeUp": true,
        "x": 1050,
        "y": 60,
        "wires": [
            [
                "4ae91e212d540717"
            ]
        ]
    },
    {
        "id": "8157d5894eaba033",
        "type": "tesla-api",
        "z": "8fc3d32655d2dfaf",
        "teslaConfig": "",
        "command": "setChargingAmps",
        "name": "setChargingAmps",
        "vehicleID": "<vehicleID>",
        "autoWakeUp": true,
        "x": 1070,
        "y": 240,
        "wires": [
            [
                "c68d8a7b691d7c20"
            ]
        ]
    },
    {
        "id": "a763f3a400604ab8",
        "type": "controltimer",
        "z": "8fc3d32655d2dfaf",
        "name": "",
        "timerType": "loop",
        "timerDurationUnit": "second",
        "timerDurationType": "num",
        "timerDuration": 6,
        "timerLoopTimeoutUnit": "second",
        "timerLoopTimeoutType": "num",
        "timerLoopTimeout": 0,
        "loopTimeoutMessageType": "str",
        "loopTimeoutMessage": "LOOP_TIMEOUT",
        "timerMaxLoopIterationsType": "num",
        "timerMaxLoopIterations": 0,
        "loopMaxIterationsMessageType": "str",
        "loopMaxIterationsMessage": "MAX_LOOP_ITERATIONS",
        "isConsecutiveStartActionTimerResetAllowed": false,
        "isRunningTimerProgressVisible": false,
        "outputReceivedMessageOnTimerTrigger": true,
        "outputReceivedMessageOnTimerHalt": true,
        "startTimerOnReceivalOfUnknownMessage": false,
        "resetTimerOnReceivalOfUnknownMessage": false,
        "isDebugModeEnabled": false,
        "timerTriggeredMessageType": "str",
        "timerTriggeredMessage": "TIMER_TRIGGERED",
        "timerHaltedMessageType": "str",
        "timerHaltedMessage": "TIMER_HALTED",
        "isStartActionEnabled": true,
        "isStopActionEnabled": true,
        "isResetActionEnabled": true,
        "isPauseActionEnabled": true,
        "isContinueActionEnabled": true,
        "actionPropertyNameType": "str",
        "actionPropertyName": "payload",
        "startActionNameType": "str",
        "startActionName": "START",
        "stopActionNameType": "str",
        "stopActionName": "STOP",
        "resetActionNameType": "str",
        "resetActionName": "RESET",
        "pauseActionNameType": "str",
        "pauseActionName": "PAUSE",
        "continueActionNameType": "str",
        "continueActionName": "CONTINUE",
        "x": 220,
        "y": 360,
        "wires": [
            [
                "4dac588305497012"
            ],
            []
        ]
    },
    {
        "id": "841387a760fc49f2",
        "type": "inject",
        "z": "8fc3d32655d2dfaf",
        "name": "",
        "props": [],
        "repeat": "43200",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 470,
        "y": 320,
        "wires": [
            [
                "4dac588305497012"
            ]
        ]
    },
    {
        "id": "6fc6d1333ed68e88",
        "type": "http request",
        "z": "8fc3d32655d2dfaf",
        "name": "check_TWC3",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://<TWC3_IP>/api/1/vitals",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "credentials": {
            "user": "",
            "password": ""
        },
        "x": 380,
        "y": 600,
        "wires": [
            [
                "0b6e8603eb1ce9dd"
            ]
        ],
        "info": "Query on the Tesla Wall Connector whether the charging cable is connected to the car"
    },
    {
        "id": "cf1c29f3f2597eb9",
        "type": "inject",
        "z": "8fc3d32655d2dfaf",
        "name": "check_TWC3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "15",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 600,
        "wires": [
            [
                "6fc6d1333ed68e88"
            ]
        ]
    },
    {
        "id": "0b6e8603eb1ce9dd",
        "type": "json",
        "z": "8fc3d32655d2dfaf",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 540,
        "y": 600,
        "wires": [
            [
                "2826c35e7ad889f5"
            ]
        ]
    },
    {
        "id": "2826c35e7ad889f5",
        "type": "function",
        "z": "8fc3d32655d2dfaf",
        "name": "vehicle connected?",
        "func": "msg.payload = msg.payload.vehicle_connected\nvar newMsg = { payload: msg.payload,topic:\"vehicle_connected\" };\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 600,
        "wires": [
            [
                "888709526c88591e"
            ]
        ]
    },
    {
        "id": "170db4afaab936a8",
        "type": "function",
        "z": "8fc3d32655d2dfaf",
        "name": "loop status",
        "func": "msg.payload = msg.payload\nvar newMsg = { payload: msg.payload,topic:\"loop_status\" };\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 540,
        "wires": [
            [
                "888709526c88591e"
            ]
        ]
    },
    {
        "id": "888709526c88591e",
        "type": "function",
        "z": "8fc3d32655d2dfaf",
        "name": "check_status",
        "func": "// set variables from two different messages\nif (msg.topic === 'loop_status') {\n  context.loop_status = msg.payload;\n} else if (msg.topic === 'vehicle_connected') {\n  context.vehicle_connected = msg.payload;\n}\n\nif (context.loop_status === \"START\") {\n    if (context.vehicle_connected === false) {\n        msg.payload = \"STOP\";\n        context.loop_status = null\n    }\n    else {\n        return [ null ];\n    }\n}\nelse {\n    return [ null ];\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 540,
        "wires": [
            [
                "9d3ba241dbdef14c"
            ]
        ]
    },
    {
        "id": "60d0bee8407a387b",
        "type": "function",
        "z": "8fc3d32655d2dfaf",
        "name": "calculate ampvalue",
        "func": "// set variables from three different messages\nif (msg.topic === 'go') {\n  context.go = msg.payload;\n} else if (msg.topic === 'ladekapa_current') {\n  context.ladekapa_current = msg.payload;\n} else if (msg.topic === 'last_ampvalue') {\n  context.last_ampvalue = msg.payload;\n}\n\n// if \"start PV controlled charging\" = STOP, then don't send a message\nif (context.go != \"START\") {\n    return [ null ];\n}\n\n// if \"start PV controlled charging\" = START, then unset context.go and set ampvalue according to PV production\ncontext.go = null\n\n// it's possible to set ampvalue smaller than 5, e.g. 2A will be shown in the Tesla App\n// if amp_value = last_ampvalue (no change) -> don't send a new message to Tesla API\n// if spare capacity is smaller than 3900W, charge at least with 5A\nif (context.ladekapa_current < 3900) {\n    ampvalue = 5 \n    if (ampvalue === context.last_ampvalue) {\n        return [ null ];\n    }\n}\n// if spare capacity is larger than 10800W, charge with full power (16A)\nelse if (context.ladekapa_current > 10800) {\n    ampvalue = 16 \n    if (ampvalue === context.last_ampvalue) {\n        return [ null ];\n    }\n}\n// calculate ampvalue (230 = voltage / 3 = 3 phases)\nelse {\n    ampvalue = (context.ladekapa_current/(230*3))|0\n    if (ampvalue === context.last_ampvalue) {\n        return [ null ];\n    }\n}\n\n// create messages as calculated above\nmsg.payload = {\"commandArgs\":{amps:ampvalue} }\nmsg.last_ampvalue = { payload: ampvalue,topic:\"last_ampvalue\" };\n\n// send messages to output 1 and output 2\nreturn [ msg.payload, msg.last_ampvalue ];\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 240,
        "wires": [
            [
                "8157d5894eaba033"
            ],
            [
                "5c5b069cf6e0d016"
            ]
        ],
        "info": "// if production = x, then set charge amp y"
    },
    {
        "id": "5c5b069cf6e0d016",
        "type": "function",
        "z": "8fc3d32655d2dfaf",
        "name": "last_ampvalue",
        "func": "var newMsg = { payload: msg.payload,topic:\"last_ampvalue\" };\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 180,
        "wires": [
            [
                "60d0bee8407a387b"
            ]
        ]
    },
    {
        "id": "7e9f2855f9f81e8f",
        "type": "ui_group",
        "name": "Fahrzeugsteuerung",
        "tab": "9f153baa.1ccb88",
        "order": 1,
        "disp": true,
        "width": "5",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9f153baa.1ccb88",
        "type": "ui_tab",
        "name": "Tesla",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    }
]
